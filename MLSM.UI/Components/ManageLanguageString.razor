@inject IJSRuntime JSRuntime

@page "/multilingual-strings"

@* The current culture (English or Arabic) can be detected automatically or set manually *@
@using System.Globalization
@using MLSM.UI.Models
@using MLSM.UI.Service
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop

@* For simplicity, we will assume there's a mechanism to switch between languages *@
@{
	string currentCulture = CultureInfo.CurrentCulture.Name; // Detects the current culture
}

<h3>@(currentCulture == "en-US" ? "Manage Strings" : "إدارة السلاسل")</h3>
<div style="margin-bottom: 10px; text-align: center;">
	<input type="search" id="tableSearch" placeholder="Search"
		   style="padding: 6px 12px; width: 300px; border-radius: 4px; border: 1px solid #ccc;" />
</div>

<div style="
    display: flex;
    justify-content: center;
    margin-top: 20px;
">
	<div style="
        max-height: 1000px;
        max-width: 90%;
        overflow: auto;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
	">
		<table id="dataTable" style="width: 100%; border-collapse: collapse; text-align: left;">
			<thead>
				<tr>
					<th style="width: 100px; border-bottom: 2px solid #ddd;">@(currentCulture == "en-US" ? "Code" : "شفرة")</th>
					<th style="width: 200px; border-bottom: 2px solid #ddd;">@(currentCulture == "en-US" ? "English Text" : "النص الانجليزي")</th>
					<th style="width: 200px; border-bottom: 2px solid #ddd;">@(currentCulture == "en-US" ? "Arabic Text" : "النص العربي")</th>
					<th style="width: 150px; border-bottom: 2px solid #ddd;">@(currentCulture == "en-US" ? "Tags" : "العلامات")</th>
					<th style="width: 150px; border-bottom: 2px solid #ddd;">@(currentCulture == "en-US" ? "Actions" : "إجراءات")</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in multilingualStrings)
				{
					<tr>
						<td style="padding: 8px; border-bottom: 1px solid #eee;">@item.Code</td>
						<td style="padding: 8px; border-bottom: 1px solid #eee;">@item.TitleEn</td>
						<td style="padding: 8px; border-bottom: 1px solid #eee;">@item.TitleAr</td>
						<td style="padding: 8px; border-bottom: 1px solid #eee;">@item.Tags</td>
						<td style="padding: 8px; border-bottom: 1px solid #eee;">
							<button @onclick="() => EditRecord(item)"
									style="padding: 5px 10px; margin-right: 5px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
								Edit
							</button>
							<button @onclick="() => DeleteRecord(item.Code)"
									style="padding: 5px 10px; background-color: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;">
								Delete
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>


@* <table class="table">
	<thead>
		<tr>
			<th>@(currentCulture == "en-US" ? "Code" : "شفرة")</th>
			<th>
				@(currentCulture == "en-US" ? "English Text" : "النص الانجليزي")
			</th>
			<th>
				@(currentCulture == "en-US" ? "Arabic Text" : "النص العربي")
			</th>
			<th>@(currentCulture == "en-US" ? "Tags" : "العلامات")</th>
			<th>@(currentCulture == "en-US" ? "Actions" : "إجراءات")</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in multilingualStrings)
		{
			<tr>
				<th>@item.Code</th>
				<td>@item.TitleEn</td>
				<td>@item.TitleAr</td>
				<td>@item.Tags</td>
				<td>
					<button @onclick="() => EditRecord(item)" class="btn btn-primary btn-sm">@("Edit")</button>
					<button @onclick="() => DeleteRecord(item.Code)" class="btn btn-danger btn-sm">@("Delete")</button>
				</td>
			</tr>
		}
	</tbody>
</table> *@

<button class="btn btn-success" @onclick="ShowAddModal">@("Add New")</button>

<!-- Modal for adding/editing records -->
@if (isModalVisible)
{
	<div class="modal show" style="display:block;">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">@("Add/Edit Record")</h5>
					<button style="margin-left:60%" type="button" class="close" @onclick="HideModal">&times;</button>
				</div>
				<div class="modal-body">
					<EditForm Model="currentItem" OnValidSubmit="HandleValidSubmit">
						<DataAnnotationsValidator />
						<ValidationSummary />

						<div class="form-group">
							<label>@(currentCulture == "en-US" ? "English Text" : "عنوان بالإنجليزية")</label>
							<InputText class="form-control" @bind-Value="currentItem.TitleEn" />
						</div>
						<div class="form-group" style="margin-top:10px;">
							<label>@(currentCulture == "en-US" ? "Arabic Text" : "عنوان بالعربية")</label>
							<InputText class="form-control" @bind-Value="currentItem.TitleAr" />
						</div>
						<div class="form-group" style="margin-top:10px">
							<label>@(currentCulture == "en-US" ? "Tags" : "العلامات")</label>
							<InputText class="form-control" @bind-Value="currentItem.Tags" />
						</div>

						<button style="margin-top:10px" type="submit" class="btn btn-primary">@("Save")</button>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
}

@code {
	List<LanguageStringResponseDto> multilingualStrings = new();

	protected override async Task OnInitializedAsync()
	{
		LangManagerService _repo = new(Configs.BaseUrl);
		multilingualStrings = await _repo.GetStrings();
	}

	// Static list of multilingual strings (initial data)
	// private List<LangManagerActionRequestDto> multilingualStrings = new List<LangManagerActionRequestDto>
	// {
	// 	new LangManagerActionRequestDto { Code = "Hi", TitleEn = "Hello", TitleAr = "مرحباً", Tags = "greeting" },
	// 	new LangManagerActionRequestDto { Code = "Bye", TitleEn = "Goodbye", TitleAr = "وداعاً", Tags = "farewell" }
	// };

	private LanguageStringResponseDto currentItem = new LanguageStringResponseDto();
	private bool isModalVisible = false;

	private void ShowAddModal()
	{
		currentItem = new LanguageStringResponseDto(); // Reset the current item for adding new
		isModalVisible = true;
	}

	private void HideModal()
	{
		isModalVisible = false;
	}

	private void EditRecord(LanguageStringResponseDto item)
	{
		currentItem = item; // Set the item to be edited
		isModalVisible = true;
	}

	private void DeleteRecord(string code)
	{
		// Delete the record from the list
		var recordToDelete = multilingualStrings.FirstOrDefault(m => m.Code == code);
		if (recordToDelete != null)
		{
			multilingualStrings.Remove(recordToDelete);
		}
	}

	private void HandleValidSubmit()
	{
		if (string.IsNullOrEmpty(currentItem.Code))
		{
			// Add new record
			currentItem.Code = multilingualStrings.Max(m => m.Code) + 1; // Assign new ID
			multilingualStrings.Add(currentItem);
		}
		else
		{
			// Edit existing record
			var existingItem = multilingualStrings.FirstOrDefault(m => m.Code == currentItem.Code);
			if (existingItem != null)
			{
				existingItem.TitleEn = currentItem.TitleEn;
				existingItem.TitleAr = currentItem.TitleAr;
				existingItem.Tags = currentItem.Tags;
			}
		}

		HideModal(); // Close the modal
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("eval", @"
                document.getElementById('tableSearch').addEventListener('input', function(event) {
                    const searchTerm = event.target.value.toLowerCase();
                    const table = document.getElementById('dataTable');
                    const rows = table.getElementsByTagName('tr');

                    for (let i = 1; i < rows.length; i++) {  // Start from 1 to skip header row
                        let row = rows[i];
                        let cells = row.getElementsByTagName('td');
                        let matchFound = false;

                        // Loop through all cells (excluding actions) to search the text
                        for (let j = 0; j < cells.length - 1; j++) {
                            if (cells[j].textContent.toLowerCase().includes(searchTerm)) {
                                matchFound = true;
                                break;
                            }
                        }

                        // Toggle row visibility based on search match
                        row.style.display = matchFound ? '' : 'none';
                    }
                });
            ");
		}
	}

}


