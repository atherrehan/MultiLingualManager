@using MLSM.UI.Models
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="langStrings">
	<div class="modal show" style="@DialogVisibility; position: fixed; top: 50%; left: 50%; transform: translate(@Transalate, -50%); width: 100vw; height: 100vh; background-color: rgba(0,0,0,0.5); z-index: 1050; align-items: center; justify-content: center;">
		<div class="modal-dialog" role="document">
			<div class="modal-content" style="width:576px;">
				<div class="modal-header">
					<h3 class="modal-title">@Properties?.Title</h3>
				</div>
				<div class="modal-header">
					<h8 class="modal-title">@Properties?.Description</h8>
				</div>
				<div class="" style="height: 6px;background-color:#a58d63"></div>
				<div class="modal-body">
					<div class="row">
						<div class="col-md-6">
							<label for="englishString">String English</label>
							<input type="text" class="form-control" id="englishString" placeholder="Enter English string">
						</div>
						<div class="col-md-6">
							<label for="arabicString">String Arabic</label>
							<input type="text" class="form-control" id="arabicString" placeholder="Enter Arabic string">
						</div>
					</div>
				</div>
				<div class="modal-body" style="margin-top:-25px">
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" @onclick="SaveButton" style="background-color:#a58d63; border-color:#a58d63">Save</button>
					<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseForm">Close</button>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@code {
	[Parameter]
	public bool IsVisible { get; set; }
	[Parameter]
	public bool IsVisibleSave { get; set; }
	[Parameter]
	public string LanguageId { get; set; } = "2";//English
	[Parameter]
	public LanguageStringComponentResponseDto? Properties { get; set; }
	private Dictionary<string, string> ValidateMessage { get; set; } = new();
	private List<LanguageStringResponseDto> langStrings = new();

	private string DialogVisibility => IsVisible ? "display: flex;" : "display: none;";
	public string Transalate => LanguageId == "2" ? "-50%" : "0%";
	private bool isLoading = false;
	private string SaveButtonEnableDisable => IsVisibleSave ? "false" : "true";
	private string SaveButtonVisibility => IsVisibleSave ? "display: flex;" : "display: flex;";
	private string SuccessMessage = "";
	private bool IsFormValidated = false;
	private bool IsSuccess = false;
	private bool showform = false;
	protected override async Task OnInitializedAsync()
	{
		IsVisibleSave = true;
		showform = true;

	}
	private async Task SaveButton()
	{
		isLoading = true;
		IsFormValidated = true;

		// requestDto.LanguageId = string.IsNullOrEmpty(requestDto.LanguageId) ? GetLanguage("LanguageId") : requestDto.LanguageId;
		// requestDto.UserId = string.IsNullOrEmpty(requestDto.UserId) ? GetLanguage("UserId") : requestDto.UserId;

		bool proceedToSave = false;

		// proceedToSave = ValidateData(flowProperties);

		if (proceedToSave == true)
		{
		}
		else
		{
			IsSuccess = false;
			showform = true;
		}
	}
	private async void CloseForm()
	{
		IsSuccess = false;
		IsFormValidated = false;
		SuccessMessage = string.Empty;
		ValidateMessage.Clear();
		StateHasChanged();
		IsVisible = false;
		showform = true;
		// await ShowHideDynamicFlow.InvokeAsync(IsVisible);
	}
}